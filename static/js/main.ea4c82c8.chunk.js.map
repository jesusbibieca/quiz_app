{"version":3,"sources":["theme/index.js","constants/index.js","helpers/index.js","store/index.js","components/Layout.js","components/Notification.js","components/Selection.js","components/QuizView.js","components/App.js","index.js"],"names":["theme","createMuiTheme","typography","h1","fontSize","h2","generateRandomIndexes","amount","constants","indexes","current","length","index","Math","floor","random","includes","push","parseApiResponse","data","filteredData","filter","Boolean","slice","names","parsedData","map","user","name","first","last","imageUrl","picture","large","userData","QuizModel","users","getUsers","thunk","actions","a","fetch","contants","response","json","setUsers","helpers","results","console","error","Error","action","state","payload","usersNames","questions","correctCount","currentQuestion","incorrectCount","incrementCorrectAnswers","incrementIncorrectAnswers","incrementCurrentQuestion","notification","open","severity","message","toggle","setContent","store","createStore","Layout","children","Grid","container","direction","item","xs","lg","useStyles","makeStyles","snackbar","width","display","alignItems","SlideTransition","props","Slide","Notification","handleClose","classes","showNotification","useStoreState","Snackbar","onClose","anchorOrigin","vertical","horizontal","autoHideDuration","TransitionComponent","Alert","className","Typography","variant","component","align","Selection","handleChange","disabled","Autocomplete","id","key","options","fullWidth","autoHighlight","renderInput","params","TextField","label","inputProps","onChange","_","selection","card","flex","flexDirection","image","margin","spacing","borderRadius","paper","paddingTop","progressContainer","justifyContent","progress","successProgress","backgroundColor","successMessage","marginTop","succesMessageHed","color","palette","success","main","centerLoading","minHeight","React","memo","useState","autocompleteDisable","setAutocompleteDisable","fetchUsers","useStoreActions","nextQuestion","increaseCorrectAnswers","increaseIncorrectAnswers","toggleNotification","showSuccessMessage","tooManyIncorrect","endOfQuiz","useEffect","Paper","elevation","gutterBottom","Card","src","alt","CardContent","LinearProgress","value","CardActions","Link","href","CircularProgress","additionalMargin","highlight","secondary","quiz","divider","App","ThemeProvider","Divider","quizStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea4c82c8.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  typography: {\n    h1: {\n      fontSize: '3rem'\n    },\n    h2: {\n      fontSize: '1.5rem'\n    }\n  }\n});\n\nexport default theme;\n","export default {\n  API_URL: 'https://randomuser.me/api/?results=105',\n  TOTAL_QUESTIONS: 50,\n  GOAL: 40,\n  INCORRECT_THRESHOLD: 10\n};\n","import constants from '../constants';\nfunction parseApiResponse(data) {\n  const filteredData = data.filter(Boolean).slice(0, 100);\n  const names = [];\n\n  const parsedData = filteredData.map((user) => {\n    const name = `${user.name.first} ${user.name.last}`;\n    names.push(name);\n    return {\n      name,\n      imageUrl: user.picture.large\n    };\n  });\n\n  return {\n    names,\n    userData: generateRandomIndexes().map((index) => parsedData[index])\n  };\n}\n\nfunction generateRandomIndexes(amount = constants.TOTAL_QUESTIONS) {\n  const indexes = [];\n\n  for (let current = 0; indexes.length < amount; current++) {\n    const index = Math.floor(Math.random() * 100);\n    if (!indexes.includes(index)) {\n      indexes.push(index);\n    }\n  }\n  return indexes;\n}\n\nexport default {\n  parseApiResponse\n};\n","import { action, createStore, thunk } from 'easy-peasy';\nimport helpers from '../helpers';\nimport contants from '../constants';\n\nconst QuizModel = {\n  users: {\n    data: [],\n    getUsers: thunk(async (actions) => {\n      try {\n        const response = await fetch(contants.API_URL);\n        const data = await response.json();\n\n        actions.setUsers(helpers.parseApiResponse(data.results));\n      } catch (error) {\n        console.error(error);\n        throw new Error('There seems to be a problem with our API');\n      }\n    }),\n    setUsers: action((state, payload) => {\n      state.data = payload;\n    })\n  },\n  usersNames: [],\n  questions: {\n    correctCount: 0,\n    currentQuestion: 0,\n    incorrectCount: 0,\n    incrementCorrectAnswers: action((state) => {\n      state.correctCount++;\n    }),\n    incrementIncorrectAnswers: action((state) => {\n      state.incorrectCount++;\n    }),\n    incrementCurrentQuestion: action((state) => {\n      state.currentQuestion++;\n    })\n  },\n  notification: {\n    open: false,\n    severity: 'info',\n    message: 'Test message!',\n    toggle: action((state) => {\n      state.open = !state.open;\n    }),\n    setContent: action((state, payload) => {\n      state.severity = payload.severity;\n      state.message = payload.message;\n    })\n  }\n};\n\nconst store = createStore(QuizModel);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\n\nfunction Layout({ children }) {\n  return (\n    <Grid container direction=\"column\">\n      <Grid item container>\n        <Grid item xs={2} lg={3} />\n        <Grid item xs={8} lg={6}>\n          {children}\n        </Grid>\n        <Grid item xs={2} lg={3} />\n      </Grid>\n    </Grid>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.node\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Snackbar, Typography, Slide, makeStyles } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useStoreState } from 'easy-peasy';\n\nconst useStyles = makeStyles({\n  snackbar: {\n    width: '500px',\n    display: 'flex',\n    alignItems: 'center'\n  }\n});\n\nfunction SlideTransition(props) {\n  return <Slide {...props} direction=\"left\" />;\n}\n\nfunction Notification({ handleClose }) {\n  const classes = useStyles();\n\n  const showNotification = useStoreState((state) => state.notification.open);\n  const { severity, message } = useStoreState((state) => state.notification);\n\n  return (\n    <Snackbar\n      open={showNotification}\n      onClose={handleClose}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      autoHideDuration={1000}\n      TransitionComponent={SlideTransition}\n    >\n      <Alert className={classes.snackbar} severity={severity}>\n        <Typography variant=\"h6\" component=\"p\" align=\"center\">\n          {message}\n        </Typography>\n      </Alert>\n    </Snackbar>\n  );\n}\n\nNotification.propTypes = {\n  handleClose: PropTypes.func\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { useStoreState } from 'easy-peasy';\n\nfunction Selection({ handleChange, disabled }) {\n  const { names } = useStoreState((state) => state.users.data);\n  const { currentQuestion } = useStoreState((state) => state.questions);\n\n  return (\n    <Autocomplete\n      id=\"quiz-name-select\"\n      key={names[currentQuestion]}\n      options={names}\n      disabled={disabled}\n      fullWidth\n      autoHighlight\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"What's your co-worker's name?\"\n          variant=\"outlined\"\n          inputProps={{\n            ...params.inputProps\n          }}\n        />\n      )}\n      onChange={(_, selection) => handleChange(selection)}\n    />\n  );\n}\n\nSelection.propTypes = {\n  handleChange: PropTypes.func,\n  disabled: PropTypes.bool\n};\n\nexport default Selection;\n","import React from 'react';\nimport { useStoreActions, useStoreState } from 'easy-peasy';\nimport {\n  Paper,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  makeStyles,\n  CircularProgress,\n  Grid,\n  Link,\n  LinearProgress\n} from '@material-ui/core';\nimport Notification from './Notification';\nimport Selection from './Selection';\n\nimport constants from '../constants';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  image: {\n    width: 'fit-content',\n    margin: `${theme.spacing(2)}px auto`,\n    borderRadius: '50%'\n  },\n  paper: {\n    paddingTop: '16px'\n  },\n  progressContainer: {\n    justifyContent: 'space-evenly',\n    alignItems: 'center'\n  },\n  actions: {\n    flexDirection: 'column'\n  },\n  progress: {\n    width: '90%'\n  },\n  successProgress: {\n    width: '90%',\n    backgroundColor: 'red'\n  },\n  successMessage: {\n    marginTop: '24px'\n  },\n  succesMessageHed: {\n    color: theme.palette.success.main\n  },\n  centerLoading: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    minHeight: '307px',\n    alignItems: 'center'\n  }\n}));\n\nfunction QuizView() {\n  const classes = useStyles();\n\n  const [autocompleteDisable, setAutocompleteDisable] = React.useState(false);\n\n  const fetchUsers = useStoreActions((actions) => actions.users.getUsers);\n  const nextQuestion = useStoreActions(\n    (actions) => actions.questions.incrementCurrentQuestion\n  );\n  const increaseCorrectAnswers = useStoreActions(\n    (actions) => actions.questions.incrementCorrectAnswers\n  );\n  const increaseIncorrectAnswers = useStoreActions(\n    (actions) => actions.questions.incrementIncorrectAnswers\n  );\n\n  const { userData } = useStoreState((state) => state.users.data);\n  const { currentQuestion, correctCount, incorrectCount } = useStoreState(\n    (state) => state.questions\n  );\n\n  const toggleNotification = useStoreActions(\n    (actions) => actions.notification.toggle\n  );\n  const setContent = useStoreActions(\n    (actions) => actions.notification.setContent\n  );\n\n  const progress = ((currentQuestion + 1) / constants.TOTAL_QUESTIONS) * 100;\n  const showSuccessMessage = correctCount >= constants.GOAL;\n  const tooManyIncorrect = incorrectCount > constants.INCORRECT_THRESHOLD;\n  const endOfQuiz = currentQuestion >= constants.TOTAL_QUESTIONS - 1;\n\n  React.useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const handleSelectionChange = (name) => {\n    setAutocompleteDisable(true);\n    if (name === userData[currentQuestion].name) {\n      increaseCorrectAnswers();\n      setContent({ severity: 'success', message: 'There you go!' });\n    } else {\n      increaseIncorrectAnswers();\n      setContent({ severity: 'error', message: 'Give it another try.' });\n    }\n    toggleNotification();\n  };\n\n  const handleCloseNotification = () => {\n    toggleNotification();\n    setAutocompleteDisable(false);\n    if (!tooManyIncorrect && !endOfQuiz) {\n      nextQuestion();\n    }\n  };\n\n  return (\n    <>\n      <Paper elevation={5} className={classes.paper}>\n        <Typography variant=\"h2\" align=\"center\" gutterBottom>\n          Test your knowledge!\n        </Typography>\n        {userData ? (\n          <Card className={classes.card}>\n            <img\n              className={classes.image}\n              src={userData[currentQuestion].imageUrl}\n              alt={userData[currentQuestion].name}\n            />\n            <CardContent>\n              <Grid\n                container\n                direction=\"column\"\n                className={classes.progressContainer}\n              >\n                {endOfQuiz ? null : (\n                  <Typography\n                    align=\"center\"\n                    gutterBottom\n                    variant=\"h6\"\n                    component=\"h2\"\n                  >\n                    You&apos;ve answered {currentQuestion} out of 50 question/s\n                    and {correctCount} are correct.\n                  </Typography>\n                )}\n                <LinearProgress\n                  className={classes.progress}\n                  variant=\"determinate\"\n                  color={tooManyIncorrect ? 'secondary' : 'primary'}\n                  value={progress}\n                />\n              </Grid>\n            </CardContent>\n            <CardActions className={classes.actions}>\n              {tooManyIncorrect ? (\n                <>\n                  <Typography\n                    align=\"center\"\n                    gutterBottom\n                    variant=\"h6\"\n                    component=\"h3\"\n                  >\n                    Too many incorrect responses recorded.\n                  </Typography>\n                  <Typography>\n                    Please try again tomorrow! Feel free to use the{' '}\n                    <Link href=\"https://webpagefx.mangoapps.com/sites/peoples/people_directory?limit=20\">\n                      Mango Directory\n                    </Link>{' '}\n                    as a study resource.\n                  </Typography>\n                </>\n              ) : endOfQuiz ? null : (\n                <Selection\n                  disabled={autocompleteDisable}\n                  handleChange={handleSelectionChange}\n                />\n              )}\n            </CardActions>\n          </Card>\n        ) : (\n          <div className={classes.centerLoading}>\n            <CircularProgress />\n          </div>\n        )}\n        <Notification handleClose={handleCloseNotification} />\n      </Paper>\n      {showSuccessMessage && (\n        <div className={classes.successMessage}>\n          <Typography\n            className={classes.succesMessageHed}\n            align=\"center\"\n            gutterBottom\n            variant=\"h6\"\n            component=\"h4\"\n          >\n            Great job!\n          </Typography>\n          <Typography>\n            You&apos;ve tested your FXFamily name knowledge and earned 1\n            FXLearns point. Please take a screenshot of this results screen and\n            include when you &ldquo;Rate + Return&rdquo; this resource{' '}\n            <Link href=\"https://operationsfx.com/myfx/fxlearns\">Here</Link>\n          </Typography>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default React.memo(QuizView);\n","import React from 'react';\nimport { StoreProvider } from 'easy-peasy';\nimport {\n  ThemeProvider,\n  Typography,\n  makeStyles,\n  Divider,\n  Link\n} from '@material-ui/core';\n\nimport theme from '../theme';\nimport quizStore from '../store';\n\nimport Layout from './Layout';\nimport QuizView from './QuizView';\n\nconst useStyles = makeStyles((theme) => ({\n  additionalMargin: {\n    margin: '16px 0'\n  },\n  highlight: {\n    color: theme.palette.secondary.main\n  },\n  quiz: {\n    marginTop: '16px'\n  },\n  divider: {\n    margin: '16px 60px'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Layout>\n        <Typography\n          className={classes.additionalMargin}\n          align=\"center\"\n          variant=\"h1\"\n        >\n          FXFamily Member Quiz\n        </Typography>\n        <Typography variant=\"body1\">\n          Test your knowledge of our{' '}\n          <span className={classes.highlight}>#BestCoworkers&apos; </span>\n          names using this picture quiz!\n          <br />\n          You&apos;ll be shown 50 different randomized profile images and asked\n          to correctly identify at least <b>40</b>.\n          <br />\n          We trust that you will not use any references during the quiz!\n        </Typography>\n        <Divider className={classes.divider} variant=\"middle\" />\n        <Typography className={classes.additionalMargin}>\n          Looking for ways to practice? Follow these ProTips!\n          <br />- Study using the{' '}\n          <span className={classes.highlight}>Liveboard</span> by selecting\n          someone&apos;s name to see their profile image.\n          <br />\n          See that person on FXCampus? Greet them using their first name!\n          <br />- Link Liveboard to{' '}\n          {<Link href=\"https://operationsfx.com/liveboard\">HERE!</Link>}\n        </Typography>\n        <StoreProvider store={quizStore}>\n          <QuizView className={classes.quiz} />\n        </StoreProvider>\n      </Layout>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}